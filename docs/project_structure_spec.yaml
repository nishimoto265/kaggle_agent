# Kaggle Agent Project Structure Specification
# Version: 1.0
# Purpose: Automated project structure generation and validation

project_name: "kaggle_agent"
version: "1.0.0"
python_version: "3.12"
architecture: "monolithic_modular"

# Root Directory Structure
root_structure:
  files:
    - name: "README.md"
      type: "documentation"
      required: true
      description: "プロジェクト概要とセットアップ手順"
      
    - name: "pyproject.toml"
      type: "configuration"
      required: true
      description: "Python プロジェクト設定とメタデータ"
      
    - name: "requirements.txt"
      type: "configuration"
      required: false
      description: "pip互換性用の依存関係ファイル"
      
    - name: ".env.example"
      type: "configuration"
      required: true
      description: "環境変数テンプレート"
      
    - name: ".gitignore"
      type: "configuration"
      required: true
      description: "Git除外設定"
      
    - name: "Dockerfile"
      type: "deployment"
      required: true
      description: "メインアプリケーション用Dockerファイル"
      
    - name: "docker-compose.yml"
      type: "deployment"
      required: true
      description: "開発環境用Docker Compose設定"
      
    - name: "Makefile"
      type: "automation"
      required: true
      description: "開発タスク自動化"

  directories:
    - name: "docs"
      required: true
      description: "プロジェクトドキュメント"
      
    - name: "src"
      required: true
      description: "ソースコード"
      
    - name: "tests"
      required: true
      description: "テストコード"
      
    - name: "scripts"
      required: true
      description: "ユーティリティスクリプト"
      
    - name: "config"
      required: true
      description: "設定ファイル"
      
    - name: "data"
      required: false
      description: "データディレクトリ（開発用）"
      
    - name: "logs"
      required: false
      description: "ログファイル（開発用）"
      
    - name: "artifacts"
      required: false
      description: "成果物（モデル、レポート等）"
      
    - name: "migrations"
      required: true
      description: "データベース移行"
      
    - name: "deployment"
      required: true
      description: "デプロイメント設定"

# Source Code Structure
src_structure:
  package_name: "kaggle_agent"
  
  core_modules:
    - name: "workflow"
      dependencies: ["prefect", "langchain"]
      description: "ワークフロー管理エンジン"
      files:
        - "engine.py"
        - "state_machine.py"
        - "orchestrator.py"
        - "tasks.py"
        
    - name: "database"
      dependencies: ["sqlalchemy", "alembic", "psycopg2"]
      description: "データベース層"
      files:
        - "connection.py"
        - "models.py"
        - "repositories.py"
        - "migrations.py"
        - "queries.py"
        
    - name: "cache"
      dependencies: ["redis"]
      description: "キャッシュ層"
      files:
        - "redis_client.py"
        - "cache_manager.py"
        - "decorators.py"
        
    - name: "storage"
      dependencies: ["boto3", "minio"]
      description: "ストレージ層"
      files:
        - "s3_client.py"
        - "file_manager.py"
        - "artifacts.py"
        
    - name: "messaging"
      dependencies: ["redis", "celery"]
      description: "メッセージング"
      files:
        - "queue_manager.py"
        - "event_bus.py"
        - "notifications.py"
        
    - name: "monitoring"
      dependencies: ["prometheus_client", "structlog"]
      description: "監視・メトリクス"
      files:
        - "metrics.py"
        - "logging.py"
        - "health_check.py"
        - "profiler.py"
        
    - name: "security"
      dependencies: ["cryptography", "jwt"]
      description: "セキュリティ"
      files:
        - "auth.py"
        - "encryption.py"
        - "vault_client.py"
        - "rate_limiter.py"

  application_modules:
    - name: "competition_discovery"
      dependencies: ["kaggle", "pandas", "scikit-learn"]
      description: "コンペティション発見・推薦"
      files:
        - "service.py"
        - "kaggle_client.py"
        - "recommender.py"
        - "filter.py"
        - "scorer.py"
        - "models.py"
        - "tasks.py"
        
    - name: "research"
      dependencies: ["httpx", "beautifulsoup4", "arxiv"]
      description: "調査・情報収集"
      subdirectories:
        - name: "apis"
          files:
            - "google_deep_research.py"
            - "arxiv.py"
            - "kaggle_datasets.py"
            - "base_client.py"
        - name: "processors"
          files:
            - "paper_processor.py"
            - "solution_processor.py"
            - "insight_extractor.py"
      files:
        - "service.py"
        - "query_builder.py"
        - "relevance_scorer.py"
        - "models.py"
        - "tasks.py"
        
    - name: "code_generation"
      dependencies: ["anthropic", "jinja2", "ast"]
      description: "コード生成・バリデーション"
      subdirectories:
        - name: "generators"
          files:
            - "eda_generator.py"
            - "preprocessing_generator.py"
            - "model_generator.py"
            - "training_generator.py"
            - "submission_generator.py"
        - name: "validators"
          files:
            - "syntax_validator.py"
            - "dependency_validator.py"
            - "security_validator.py"
        - name: "templates"
          files:
            - "base_template.py"
          subdirectories:
            - name: "problem_specific"
      files:
        - "service.py"
        - "claude_client.py"
        - "models.py"
        - "tasks.py"
        
    - name: "gpu_management"
      dependencies: ["paramiko", "docker", "kubernetes"]
      description: "GPU リソース管理"
      subdirectories:
        - name: "providers"
          files:
            - "salad_cloud.py"
            - "vast_ai.py"
            - "lambda_labs.py"
            - "base_provider.py"
      files:
        - "service.py"
        - "provisioner.py"
        - "monitor.py"
        - "cost_optimizer.py"
        - "session_manager.py"
        - "models.py"
        - "tasks.py"
        
    - name: "training"
      dependencies: ["torch", "tensorflow", "xgboost", "lightgbm"]
      description: "モデル訓練実行"
      files:
        - "service.py"
        - "job_manager.py"
        - "executor.py"
        - "monitor.py"
        - "hyperparameter_tuner.py"
        - "model_registry.py"
        - "models.py"
        - "tasks.py"
        
    - name: "submission"
      dependencies: ["kaggle", "pandas"]
      description: "Kaggle提出管理"
      files:
        - "service.py"
        - "kaggle_submitter.py"
        - "file_validator.py"
        - "score_tracker.py"
        - "ranking_analyzer.py"
        - "models.py"
        - "tasks.py"
        
    - name: "human_loop"
      dependencies: ["slack_sdk", "discord.py", "fastapi"]
      description: "人的介入管理"
      files:
        - "service.py"
        - "intervention_manager.py"
        - "notification_sender.py"
        - "approval_handler.py"
        - "escalation_manager.py"
        - "dashboard_api.py"
        - "models.py"
        - "tasks.py"

  api_layer:
    framework: "fastapi"
    dependencies: ["fastapi", "uvicorn", "pydantic"]
    files:
      - "app.py"
      - "dependencies.py"
      - "middleware.py"
    subdirectories:
      - name: "routers"
        files:
          - "competitions.py"
          - "executions.py"
          - "submissions.py"
          - "interventions.py"
          - "metrics.py"
          - "health.py"
      - name: "schemas"
        files:
          - "competitions.py"
          - "executions.py"
          - "submissions.py"
          - "common.py"

  cli_layer:
    framework: "click"
    dependencies: ["click", "rich"]
    files:
      - "main.py"
      - "utils.py"
    subdirectories:
      - name: "commands"
        files:
          - "start.py"
          - "stop.py"
          - "status.py"
          - "deploy.py"
          - "migrate.py"

  utilities:
    files:
      - "datetime_utils.py"
      - "file_utils.py"
      - "json_utils.py"
      - "string_utils.py"
      - "validation.py"
      - "decorators.py"
      - "async_utils.py"

# Test Structure
test_structure:
  framework: "pytest"
  dependencies: ["pytest", "pytest-asyncio", "pytest-cov", "httpx"]
  
  categories:
    - name: "unit"
      description: "単体テスト"
      coverage_target: 90
      subdirectories:
        - "core"
        - "modules"
        - "utils"
        
    - name: "integration"
      description: "統合テスト"
      coverage_target: 80
      files:
        - "test_api_endpoints.py"
        - "test_workflow_integration.py"
        - "test_database_integration.py"
        - "test_external_apis.py"
        
    - name: "e2e"
      description: "エンドツーエンドテスト"
      files:
        - "test_full_workflow.py"
        - "test_gpu_training.py"
        - "test_submission_flow.py"
        
    - name: "performance"
      description: "パフォーマンステスト"
      dependencies: ["locust", "memory_profiler"]
      files:
        - "test_load.py"
        - "test_stress.py"
        - "test_gpu_utilization.py"

# Configuration Structure
config_structure:
  format: "yaml"
  environments:
    - "default"
    - "development"
    - "staging"
    - "production"
    - "testing"
    
  categories:
    - name: "modules"
      description: "モジュール別設定"
      files:
        - "competition_discovery.yaml"
        - "research.yaml"
        - "code_generation.yaml"
        - "gpu_management.yaml"
        - "training.yaml"
        - "submission.yaml"
        - "human_loop.yaml"
        
    - name: "apis"
      description: "外部API設定"
      files:
        - "kaggle.yaml"
        - "google_deep_research.yaml"
        - "claude_code.yaml"
        - "salad_cloud.yaml"
        - "slack.yaml"
        
    - name: "infrastructure"
      description: "インフラ設定"
      files:
        - "database.yaml"
        - "cache.yaml"
        - "storage.yaml"
        - "monitoring.yaml"
        - "security.yaml"

# Scripts Structure
scripts_structure:
  categories:
    - name: "setup"
      description: "初期セットアップ"
      files:
        - name: "install_dependencies.sh"
          executable: true
        - name: "setup_database.py"
          interpreter: "python"
        - name: "create_admin_user.py"
          interpreter: "python"
        - name: "initialize_config.py"
          interpreter: "python"
          
    - name: "development"
      description: "開発支援"
      files:
        - name: "start_dev_environment.sh"
          executable: true
        - name: "reset_database.py"
          interpreter: "python"
        - name: "load_sample_data.py"
          interpreter: "python"
        - name: "generate_test_data.py"
          interpreter: "python"
          
    - name: "deployment"
      description: "デプロイメント"
      files:
        - name: "build_docker.sh"
          executable: true
        - name: "deploy_staging.sh"
          executable: true
        - name: "deploy_production.sh"
          executable: true
        - name: "backup_database.py"
          interpreter: "python"
          
    - name: "maintenance"
      description: "保守・運用"
      files:
        - name: "cleanup_old_data.py"
          interpreter: "python"
        - name: "optimize_database.py"
          interpreter: "python"
        - name: "health_check.py"
          interpreter: "python"
        - name: "metrics_reporter.py"
          interpreter: "python"
          
    - name: "utilities"
      description: "ユーティリティ"
      files:
        - name: "data_migration.py"
          interpreter: "python"
        - name: "config_validator.py"
          interpreter: "python"
        - name: "log_analyzer.py"
          interpreter: "python"
        - name: "performance_profiler.py"
          interpreter: "python"

# Database Migrations
migrations_structure:
  tool: "alembic"
  directories:
    - name: "alembic"
      description: "Alembic移行ファイル"
      subdirectories:
        - name: "versions"
          files:
            - "001_initial_schema.py"
            - "002_add_gpu_management.py"
            - "003_add_human_interventions.py"
            - "004_add_metrics_partitioning.py"
      files:
        - "alembic.ini"
        - "env.py"
        - "script.py.mako"
        
    - name: "data"
      description: "データ移行"
      files:
        - "seed_competitions.py"
        - "seed_configurations.py"
        - "update_schema_v2.py"
        
    - name: "rollback"
      description: "ロールバック用"
      files:
        - "rollback_v1_to_v0.py"
        - "emergency_rollback.py"

# Deployment Structure
deployment_structure:
  technologies:
    - "docker"
    - "kubernetes"
    - "terraform"
    - "ansible"
    - "helm"
    
  categories:
    - name: "docker"
      files:
        - "Dockerfile.api"
        - "Dockerfile.worker"
        - "Dockerfile.scheduler"
        - "docker-compose.override.yml"
        
    - name: "kubernetes"
      subdirectories:
        - name: "deployments"
        - name: "services"
        - name: "ingress"
      files:
        - "namespace.yaml"
        - "configmap.yaml"
        - "secrets.yaml"
        
    - name: "terraform"
      subdirectories:
        - name: "modules"
        - name: "environments"
      files:
        - "main.tf"
        - "variables.tf"
        - "outputs.tf"
        
    - name: "ansible"
      subdirectories:
        - name: "playbooks"
        - name: "inventory"
        - name: "roles"
        
    - name: "helm"
      subdirectories:
        - name: "templates"
        - name: "charts"
      files:
        - "Chart.yaml"
        - "values.yaml"

# Documentation Structure
documentation_structure:
  categories:
    - name: "design"
      files:
        - "requirements.md"
        - "architecture_design.md"
        - "api_integration_design.md"
        - "database_schema_design.md"
        - "project_structure.md"
        
    - name: "implementation"
      files:
        - "module_specifications.md"
        - "api_documentation.md"
        - "deployment_guide.md"
        - "configuration_guide.md"
        
    - name: "operations"
      files:
        - "monitoring_guide.md"
        - "troubleshooting.md"
        - "maintenance_procedures.md"
        - "backup_recovery.md"
        
    - name: "development"
      files:
        - "development_setup.md"
        - "coding_standards.md"
        - "testing_guide.md"
        - "contribution_guide.md"

# File Generation Rules
generation_rules:
  python_files:
    template: "# -*- coding: utf-8 -*-\n\"\"\"\n{description}\n\"\"\"\n\n"
    imports_order:
      - "standard_library"
      - "third_party"
      - "local_application"
    max_line_length: 88
    
  test_files:
    naming_pattern: "test_{module_name}.py"
    template: "# -*- coding: utf-8 -*-\n\"\"\"\nTests for {module_name}\n\"\"\"\n\nimport pytest\n\n"
    
  config_files:
    format: "yaml"
    validation: true
    schema_validation: true
    
  script_files:
    shebang: "#!/usr/bin/env python3"
    executable: true
    error_handling: true

# Validation Rules
validation_rules:
  required_files:
    - "README.md"
    - "pyproject.toml"
    - "src/kaggle_agent/__init__.py"
    - "tests/conftest.py"
    - "config/default.yaml"
    
  naming_conventions:
    modules: "snake_case"
    classes: "PascalCase"
    functions: "snake_case"
    constants: "UPPER_SNAKE_CASE"
    
  code_quality:
    tools:
      - "black"
      - "isort"
      - "flake8"
      - "mypy"
    coverage_minimum: 80
    
  documentation:
    required_sections:
      - "Installation"
      - "Configuration"
      - "Usage"
      - "API Reference"
      - "Contributing"
    format: "markdown" 