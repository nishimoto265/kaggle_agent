# API Integration Specification
# Version: 0.1
# Date: 2025-06-05

api_integration:
  metadata:
    version: "0.1"
    created_date: "2025-06-05"
    total_apis: 5
    
  common_patterns:
    authentication:
      types: ["api_key", "bearer_token", "basic_auth"]
      rotation_period: "30d"
      storage: "vault"
    
    rate_limiting:
      strategy: "token_bucket"
      backoff_strategy: "exponential"
      max_backoff: "300s"
      jitter: true
    
    retry_policy:
      max_attempts: 3
      retry_conditions:
        - "network_timeout"
        - "rate_limit_exceeded"
        - "temporary_server_error"
      no_retry_conditions:
        - "authentication_failed"
        - "invalid_request"
        - "resource_not_found"
    
    timeout_settings:
      connection_timeout: "10s"
      read_timeout: "30s"
      total_timeout: "60s"
    
    error_handling:
      log_level: "INFO"
      alert_on_consecutive_failures: 3
      circuit_breaker_threshold: 5

  apis:
    kaggle_api:
      metadata:
        name: "Kaggle API"
        purpose: "Competition and submission management"
        documentation_url: "https://www.kaggle.com/docs/api"
        base_url: "https://www.kaggle.com/api/v1"
        
      authentication:
        type: "basic_auth"
        credentials:
          username: "env:KAGGLE_USERNAME"
          password: "env:KAGGLE_KEY"
        
      rate_limits:
        default: "200/hour"
        download: "10/hour"
        submission: "5/day"
        
      endpoints:
        competitions_list:
          path: "/competitions/list"
          method: "GET"
          cache_ttl: "1h"
          params:
            group: ["general", "entered", "inClass"]
            category: ["all", "featured", "research", "recruitment", "gettingStarted", "masters"]
            sort_by: ["grouped", "prize", "earliestDeadline", "latestDeadline", "numberOfTeams", "recentlyCreated"]
            page: "int"
            search: "string"
          response_format: "json"
          
        competition_detail:
          path: "/competitions/{id}"
          method: "GET"
          cache_ttl: "6h"
          params:
            id: "string"
          response_format: "json"
          
        dataset_download:
          path: "/competitions/{id}/data/download"
          method: "GET"
          params:
            id: "string"
          response_format: "binary"
          timeout: "300s"
          
        submission_create:
          path: "/competitions/{id}/submissions"
          method: "POST"
          params:
            id: "string"
          body:
            content_type: "multipart/form-data"
            fields:
              - name: "file"
                type: "file"
                required: true
              - name: "message"
                type: "string"
                required: false
          response_format: "json"
          
        submission_status:
          path: "/competitions/submissions/list/{id}"
          method: "GET"
          cache_ttl: "5m"
          params:
            id: "string"
          response_format: "json"

      data_models:
        Competition:
          fields:
            - name: "id"
              type: "string"
              required: true
            - name: "title"
              type: "string"
              required: true
            - name: "url"
              type: "string"
              required: true
            - name: "description"
              type: "string"
              required: false
            - name: "category"
              type: "string"
              required: true
            - name: "reward"
              type: "integer"
              required: false
            - name: "teamCount"
              type: "integer"
              required: true
            - name: "userHasEntered"
              type: "boolean"
              required: true
            - name: "userRank"
              type: "integer"
              required: false
            - name: "deadline"
              type: "datetime"
              required: true
            - name: "evaluationMetric"
              type: "string"
              required: true
        
        SubmissionResult:
          fields:
            - name: "id"
              type: "string"
              required: true
            - name: "fileName"
              type: "string"
              required: true
            - name: "publicScore"
              type: "float"
              required: false
            - name: "privateScore"
              type: "float"
              required: false
            - name: "status"
              type: "string"
              required: true
            - name: "submittedAt"
              type: "datetime"
              required: true

    google_agentspace_deep_research:
      metadata:
        name: "Google Agentspace Deep Research"
        purpose: "Deep Research via Google Agentspace Enterprise"
        documentation_url: "https://cloud.google.com/agentspace/agentspace-enterprise/docs/research-assistant#rest"
        base_url: "https://discoveryengine.googleapis.com/v1alpha"
        
      authentication:
        type: "google_cloud_bearer_token"
        credentials:
          project_id: "env:GOOGLE_CLOUD_PROJECT_ID"
          app_id: "env:GOOGLE_AGENTSPACE_APP_ID"
          assistant_id: "default_assistant"
        method: "gcloud auth print-access-token"
        
      rate_limits:
        default: "100/hour"
        stream_assist: "50/hour"
        
      endpoints:
        stream_assist:
          path: "/projects/{project_id}/locations/global/collections/default_collection/engines/{app_id}/assistants/{assistant_id}:streamAssist"
          method: "POST"
          headers:
            authorization: "Bearer {auth_token}"
            x_goog_user_project: "{project_id}"
            content_type: "application/json"
          body:
            content_type: "application/json"
            schema:
              query:
                text: "string"
              answerGenerationMode: "research"
          response_format: "streaming_json"
          timeout: "60s"
          features:
            - "real_time_streaming"
            - "citation_generation"
            - "audio_summary"

      data_models:
        ResearchQuery:
          fields:
            - name: "text"
              type: "string"
              required: true
              max_length: 1000
              description: "Research question or topic"
        
        ResearchStreamChunk:
          fields:
            - name: "type"
              type: "string"
              required: true
              enum: ["progress", "content", "citation", "summary"]
            - name: "content"
              type: "string"
              required: true
            - name: "metadata"
              type: "object"
              required: false
        
        ResearchReport:
          fields:
            - name: "title"
              type: "string"
              required: true
            - name: "content"
              type: "string"
              required: true
            - name: "citations"
              type: "array"
              required: true
            - name: "audio_summary_url"
              type: "string"
              required: false
            - name: "research_plan"
              type: "array"
              required: true
            - name: "confidence_score"
              type: "float"
              required: true
              min: 0.0
              max: 1.0

    claude_code_api:
      metadata:
        name: "Claude Code API"
        purpose: "Code generation and optimization"
        documentation_url: "https://docs.anthropic.com/claude/reference"
        base_url: "https://api.anthropic.com/v1"
        
      authentication:
        type: "api_key"
        credentials:
          api_key: "env:CLAUDE_API_KEY"
        header_name: "x-api-key"
        
      rate_limits:
        default: "1000/hour"
        requests_per_minute: "50"
        tokens_per_minute: "40000"
        
      endpoints:
        messages_create:
          path: "/messages"
          method: "POST"
          body:
            content_type: "application/json"
            schema:
              model: "string"
              max_tokens: "integer"
              messages: "array"
              system: "string"
              temperature: "float"
          response_format: "json"
          timeout: "120s"

      data_models:
        CodeGenerationRequest:
          fields:
            - name: "taskDescription"
              type: "string"
              required: true
              max_length: 2000
            - name: "requirements"
              type: "array"
              required: true
            - name: "constraints"
              type: "array"
              required: false
            - name: "targetFramework"
              type: "string"
              required: true
              enum: ["pytorch", "tensorflow", "sklearn", "xgboost"]
            - name: "complexityLevel"
              type: "string"
              required: true
              enum: ["baseline", "intermediate", "advanced"]
        
        CodeBundle:
          fields:
            - name: "mainScript"
              type: "string"
              required: true
            - name: "trainingScript"
              type: "string"
              required: true
            - name: "inferenceScript"
              type: "string"
              required: true
            - name: "requirementsTxt"
              type: "string"
              required: true
            - name: "dockerfile"
              type: "string"
              required: true
            - name: "documentation"
              type: "string"
              required: true

    saladcloud_api:
      metadata:
        name: "SaladCloud API"
        purpose: "GPU resource management"
        documentation_url: "https://docs.salad.com/api"
        base_url: "https://api.salad.com/api/public"
        
      authentication:
        type: "bearer_token"
        credentials:
          access_token: "env:SALAD_API_KEY"
        header_name: "Authorization"
        header_format: "Bearer {access_token}"
        
      rate_limits:
        default: "500/hour"
        container_operations: "100/hour"
        
      endpoints:
        container_groups_list:
          path: "/organizations/{org}/projects/{project}/container-groups"
          method: "GET"
          params:
            org: "string"
            project: "string"
          response_format: "json"
          
        container_groups_create:
          path: "/organizations/{org}/projects/{project}/container-groups"
          method: "POST"
          params:
            org: "string"
            project: "string"
          body:
            content_type: "application/json"
            schema:
              name: "string"
              container:
                image: "string"
                resources:
                  cpu: "integer"
                  memory: "integer"
                  gpuClasses: "array"
              replicas: "integer"
          response_format: "json"
          
        container_groups_start:
          path: "/organizations/{org}/projects/{project}/container-groups/{id}/start"
          method: "POST"
          params:
            org: "string"
            project: "string"
            id: "string"
          response_format: "json"
          
        container_groups_stop:
          path: "/organizations/{org}/projects/{project}/container-groups/{id}/stop"
          method: "POST"
          params:
            org: "string"
            project: "string"
            id: "string"
          response_format: "json"

      data_models:
        GPUSpec:
          fields:
            - name: "gpuType"
              type: "string"
              required: true
              enum: ["gtx1650", "rtx3060", "rtx3070", "rtx3080", "rtx3090", "rtx4090"]
            - name: "vramGb"
              type: "integer"
              required: true
            - name: "cpuCores"
              type: "integer"
              required: true
            - name: "ramGb"
              type: "integer"
              required: true
            - name: "hourlyPrice"
              type: "float"
              required: true
        
        ContainerGroup:
          fields:
            - name: "id"
              type: "string"
              required: true
            - name: "name"
              type: "string"
              required: true
            - name: "status"
              type: "string"
              required: true
              enum: ["pending", "running", "stopping", "stopped", "error"]
            - name: "replicas"
              type: "integer"
              required: true
            - name: "createdAt"
              type: "datetime"
              required: true
            - name: "currentCost"
              type: "float"
              required: true

    slack_api:
      metadata:
        name: "Slack API"
        purpose: "Human-in-the-loop notifications"
        documentation_url: "https://api.slack.com/"
        base_url: "https://slack.com/api"
        
      authentication:
        type: "bearer_token"
        credentials:
          bot_token: "env:SLACK_BOT_TOKEN"
        header_name: "Authorization"
        header_format: "Bearer {bot_token}"
        
      rate_limits:
        default: "50/minute"
        chat_postMessage: "1/second"
        
      endpoints:
        chat_postMessage:
          path: "/chat.postMessage"
          method: "POST"
          body:
            content_type: "application/json"
            schema:
              channel: "string"
              text: "string"
              blocks: "array"
              thread_ts: "string"
          response_format: "json"
          
        reactions_get:
          path: "/reactions.get"
          method: "GET"
          params:
            channel: "string"
            timestamp: "string"
          response_format: "json"

      data_models:
        NotificationMessage:
          fields:
            - name: "channel"
              type: "string"
              required: true
            - name: "text"
              type: "string"
              required: true
            - name: "attachments"
              type: "array"
              required: false
            - name: "thread_ts"
              type: "string"
              required: false
        
        DecisionOption:
          fields:
            - name: "id"
              type: "string"
              required: true
            - name: "title"
              type: "string"
              required: true
            - name: "description"
              type: "string"
              required: true
            - name: "emoji"
              type: "string"
              required: true
            - name: "consequences"
              type: "array"
              required: false

  testing_strategy:
    unit_tests:
      coverage_target: "85%"
      mock_external_apis: true
      test_frameworks: ["pytest", "pytest-asyncio", "httpx-mock"]
      
    integration_tests:
      test_environments: ["staging", "production"]
      test_scenarios:
        - "successful_api_calls"
        - "rate_limit_handling"
        - "timeout_handling"
        - "authentication_failure"
        - "network_errors"
        
    performance_tests:
      load_testing: true
      concurrent_requests: 50
      duration: "5m"
      acceptance_criteria:
        response_time_95th: "5s"
        error_rate: "< 1%"
        throughput: "> 100 req/min"

  monitoring:
    metrics:
      - name: "api_request_total"
        type: "counter"
        labels: ["api_name", "endpoint", "status_code"]
        
      - name: "api_request_duration_seconds"
        type: "histogram"
        labels: ["api_name", "endpoint"]
        buckets: [0.1, 0.5, 1.0, 2.0, 5.0, 10.0]
        
      - name: "api_rate_limit_remaining"
        type: "gauge"
        labels: ["api_name"]
        
      - name: "api_errors_total"
        type: "counter"
        labels: ["api_name", "error_type"]
        
    alerts:
      - name: "HighAPIErrorRate"
        condition: "api_errors_total / api_request_total > 0.05"
        duration: "5m"
        severity: "warning"
        
      - name: "APIRateLimitApproaching"
        condition: "api_rate_limit_remaining < 10"
        duration: "1m"
        severity: "critical"
        
      - name: "SlowAPIResponse"
        condition: "api_request_duration_seconds_95th > 10"
        duration: "2m"
        severity: "warning"

  security:
    api_key_management:
      storage: "hashicorp_vault"
      rotation_schedule: "monthly"
      access_control: "rbac"
      
    request_logging:
      log_headers: false
      log_body: false
      log_response: false
      log_metadata_only: true
      
    network_security:
      use_tls: true
      verify_certificates: true
      allowed_hosts: ["kaggle.com", "googleapis.com", "anthropic.com", "salad.com", "slack.com"]
      
    data_protection:
      encrypt_in_transit: true
      encrypt_at_rest: true
      data_retention: "30d"
      pii_handling: "anonymize" 